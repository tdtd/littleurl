{"version":3,"sources":["../../../../server/api/newurl/newurl.integration.js"],"names":[],"mappings":"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","file":"newurl.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newNewurl;\n\ndescribe('Newurl API:', function() {\n\n  describe('GET /newurl', function() {\n    var newurls;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/newurl')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newurls = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      newurls.should.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /newurl', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/newurl')\n        .send({\n          name: 'New Newurl',\n          info: 'This is the brand new newurl!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newNewurl = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created newurl', function() {\n      newNewurl.name.should.equal('New Newurl');\n      newNewurl.info.should.equal('This is the brand new newurl!!!');\n    });\n\n  });\n\n  describe('GET /newurl/:id', function() {\n    var newurl;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/newurl/' + newNewurl._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newurl = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      newurl = {};\n    });\n\n    it('should respond with the requested newurl', function() {\n      newurl.name.should.equal('New Newurl');\n      newurl.info.should.equal('This is the brand new newurl!!!');\n    });\n\n  });\n\n  describe('PUT /newurl/:id', function() {\n    var updatedNewurl;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/newurl/' + newNewurl._id)\n        .send({\n          name: 'Updated Newurl',\n          info: 'This is the updated newurl!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedNewurl = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedNewurl = {};\n    });\n\n    it('should respond with the updated newurl', function() {\n      updatedNewurl.name.should.equal('Updated Newurl');\n      updatedNewurl.info.should.equal('This is the updated newurl!!!');\n    });\n\n  });\n\n  describe('DELETE /newurl/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/newurl/' + newNewurl._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when newurl does not exist', function(done) {\n      request(app)\n        .delete('/newurl/' + newNewurl._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}